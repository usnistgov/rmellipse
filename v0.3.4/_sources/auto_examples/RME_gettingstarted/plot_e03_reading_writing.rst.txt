
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\RME_gettingstarted\plot_e03_reading_writing.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_RME_gettingstarted_plot_e03_reading_writing.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_RME_gettingstarted_plot_e03_reading_writing.py:


Reading/Writing RMEMeas Objects
===============================

This is a basic example demonstrating how to read and write a RMEMeas object.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

Creating an Object
------------------
First lets create an object that we want to save.

.. GENERATED FROM PYTHON SOURCE LINES 13-37

.. code-block:: Python


    from rmellipse.uobjects import RMEMeas

    import xarray as xr
    import numpy as np

    nom = xr.DataArray(np.zeros((10, 2)),
                       dims=('d1', 'd2'),
                       coords={'d1': np.arange(10),
                               'd2': np.arange(2)})

    meas = RMEMeas.from_nom(name='meas', nom=nom)

    meas.add_umech(
        name='mymechanisms',
        value=meas.nom + np.ones(meas.nom.shape) * 0.01,
        dof=np.inf,
        category={'Type': 'B', 'Origin': 'Data Sheet'},
        add_uid=True
    )

    for i in range(100):
        meas.add_mc_sample(meas.nom + np.random.rand(*meas.nom.shape) * 0.01)








.. GENERATED FROM PYTHON SOURCE LINES 38-58

HDF5 Saving
-----------

Saving to HDF5 is the recommended format for saving RMEMeas objects.
Compared to xml, it's much faster and preserves category and degree
of freedom information about the object. In addition, the HDF5 format doesn't
require you to define a data format with to_csv and from_csv functions.

To save, open an HDF5 file or group and pass that to the
:func:`rmellipse.uobjects.RMEMeas.to_h5` function. The RMEMeas object
will be stored in the group you provide it under a group with it's name.
The override argument tells the function to delete any pre-existing
groups with that RMEMeas objects name then try to save it, to avoid
permission errors.

We recommend downloading the HDF5 viewer software. You can inspect your
HDF5 object, and you will see that under the 'myval' group this creates, you
will see the cov,mc,covdofs, and covcats attributes stored. Each one is an
HDF5 representation of an xarray DataArray and together completely describe
your RMEMeas object.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: Python

    import h5py
    with h5py.File('meas.hdf5', 'a') as f:
        meas.to_h5(f, override=True)
        print(f[meas.name])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <HDF5 group "/meas" (4 members)>




.. GENERATED FROM PYTHON SOURCE LINES 64-70

HDF5 Reading
------------

You can open the HDF5 file you made in read mode,
then pass in the group with it's name to
:func:`rmellipse.uobjects.RMEMeas.from_h5` in order to read it.

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: Python

    with h5py.File('meas.hdf5', 'r') as f:
        meas = RMEMeas.from_h5(f['meas'])
        print(meas)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    meas with nominal: 
    <xarray.DataArray (d1: 10, d2: 2)> Size: 160B
    array([[0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.]])
    Coordinates:
      * d1       (d1) int64 80B 0 1 2 3 4 5 6 7 8 9
      * d2       (d2) int64 16B 0 1
    Attributes:
        __class__.__module__:  xarray.core.dataarray
        __class__.__name__:    DataArray
        is_big_object:         True
        save_type:             DATAARRAY_SAVEABLE




.. GENERATED FROM PYTHON SOURCE LINES 76-95

XML Saving
----------

XML format is a legacy format inherited from the original drag and
drop menu Microwave Uncertainty Framework. It is included for backwards compatibility purposes, but it is
not the recommended way to save if you can help it. Specifically be aware
that saving data to XML you will lose degrees of freedom and category information
about
your linear uncertainty mechanisms. The default degrees of freedom for linear uncertainties
is infinite, and the default category for uncertainties is type B. So
if you save to XML then read it back in, all your mechanisms will default
to both of those properties. To preserve categories and degrees of freedom
you assigned, use HDF5. Additionally, it is much slower than the
HDF5 format.

To save to XML you need to define a read/write functions.

First we turn our object into the s1p_ri format using the
:func:`rmellipse.dataformats.as_format`

.. GENERATED FROM PYTHON SOURCE LINES 95-113

.. code-block:: Python

    from rmellipse.propagators import RMEProp

    def to_txt(data, path):
            np.savetxt(path, data.values, delimiter=',')

    def from_txt(path):
        values = xr.DataArray(np.loadtxt(path, float, delimiter=','))
        return values

    m1 = RMEMeas.from_nom('mymeas', xr.DataArray(np.zeros((2,2))))
    m1.add_umech('my umech', m1.nom.copy()+0.1)

    m1.to_xml(
        '.',
        to_txt,
        data_extension='.csv',
        header_extension='.meas'
    )







.. GENERATED FROM PYTHON SOURCE LINES 114-129

Once we have our measurement in a format with read/write functions defined
we can use the :func:`rmellipse.uobjects.RMEMeas.to_xml` and
:func:`rmellipse.uobjects.RMEMeas.from_xml` functions.

:func:`rmellipse.uobjects.RMEMeas.to_xml` is expecting a target directory
to save the measurement
in. It will save a header '.meas' file and a '..._Support'
in that directory with the covariance and Monte Carlo data next to it. Both will be
named using the RMEMeas object's name attribute. When a RMEMeas object is
passed
through a function, it's name attribute is changed to the name of that
function.
So, be sure to change the name attribute to something useful if the function
name
is not specific enough.

.. GENERATED FROM PYTHON SOURCE LINES 129-134

.. code-block:: Python


    m2 = RMEMeas.from_xml(
        'mymeas.meas',
        from_csv=from_txt
    )
    assert (m2.cov.values == m1.cov.values).all()







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.265 seconds)


.. _sphx_glr_download_auto_examples_RME_gettingstarted_plot_e03_reading_writing.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_e03_reading_writing.ipynb <plot_e03_reading_writing.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_e03_reading_writing.py <plot_e03_reading_writing.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_e03_reading_writing.zip <plot_e03_reading_writing.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
